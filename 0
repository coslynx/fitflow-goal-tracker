import express, { Express, Request, Response, NextFunction } from 'express';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import routes from './routes';
import { log } from 'console';

dotenv.config();

const app: Express = express();
const port = process.env.PORT || 3000;

app.use(express.json());

//Database connection
const dbURL = process.env.MONGODB_URI;
if (!dbURL) {
  console.error('MongoDB connection string not found in environment variables.');
  process.exit(1);
}

mongoose.connect(dbURL)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => {
    console.error('Error connecting to MongoDB:', err);
    process.exit(1);
  });



// Routes
app.use('/api', routes);

// Error handling middleware
app.use((err: any, req: Request, res: Response, next: NextFunction) => {
    console.error("Global error handler triggered: ",err);
    res.status(500).send({ message: 'Internal Server Error', error: err.message });
});

const server = app.listen(port, () => {
  console.log(Server is running on port ${port});
});



// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('SIGINT signal received: closing HTTP server');
    server.close(async () => {
        console.log('HTTP server closed');
        try {
            await mongoose.connection.close();
            console.log('MongoDB connection closed.');
        } catch (error) {
            console.error('Error closing MongoDB connection:', error);
        }
        process.exit(0);
    });
    
});

process.on('SIGTERM', async () => {
    console.log('SIGTERM signal received: closing HTTP server');
    server.close(async () => {
        console.log('HTTP server closed');
         try {
            await mongoose.connection.close();
            console.log('MongoDB connection closed.');
        } catch (error) {
            console.error('Error closing MongoDB connection:', error);
        }
        process.exit(0);
    });
});