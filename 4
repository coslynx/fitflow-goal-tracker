import React, { useState, FormEvent, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { Input } from './Input';
import { Button } from './Button';
import { api } from '../services/api';

interface AuthFormProps {
  type: 'login' | 'register';
}

const AuthForm: React.FC<AuthFormProps> = ({ type }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();
  const { login, register } = useAuth();

  useEffect(() => {
    console.log("AuthForm component mounted");
    return () => {
      console.log("AuthForm component unmounted");
    }
  }, [])

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    console.log(Form submit initiated for ${type});

    if (!email.trim() || !password.trim()) {
        setError("Please fill in all fields.");
        console.error("Form submission failed: Empty fields");
        return;
    }

    const sanitizedEmail = String(email).trim();
    const sanitizedPassword = String(password).trim();

    try {
        if (type === 'login') {
          console.log("Attempting login");
            await login(sanitizedEmail, sanitizedPassword);
            console.log("Login successful, navigating to dashboard");
        } else {
          console.log("Attempting registration");
            await register(sanitizedEmail, sanitizedPassword);
            console.log("Registration successful, navigating to dashboard");
        }
      navigate('/dashboard');

    } catch (err: any) {
      console.error(Authentication failed:, err);
        setError(err.message || "An error occurred during authentication.");
    }
  };


  return (
    <form onSubmit={handleSubmit} className="flex flex-col gap-4 p-4 bg-gray-100 rounded shadow-md w-full max-w-sm">
       <h2 className="text-2xl font-bold mb-4 text-center">{type === 'login' ? 'Login' : 'Register'}</h2>
      <Input
        label="Email"
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        required
      />
      <Input
        label="Password"
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        required
      />
      {error && <p className="text-red-500 text-sm">{error}</p>}
      <Button type="submit">{type === 'login' ? 'Login' : 'Register'}</Button>
    </form>
  );
};

export default AuthForm;